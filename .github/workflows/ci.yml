name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Lint with ruff
      run: |
        uv run ruff check .
        uv run ruff format --check .
    
    - name: Type check with pyright
      run: uv run pyright
    
    - name: Test basic functionality
      run: |
        uv run python -c "
        import sys
        sys.path.insert(0, 'src')
        from yt_down.config import Config
        from yt_down.logger import setup_logging
        print('âœ… Basic imports successful')
        "
    
    - name: Test CLI
      run: uv run python main.py --help

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python 3.11
      run: uv python install 3.11
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-3.11-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-3.11-
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Build package
      run: uv run python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  publish:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/